@page "/placeorder"

@inject NavigationManager NavigationManager
@inject IViewShoppingCartUseCase viewShoppingCartUseCase
@inject IPlaceOrderUseCase placeOrderUseCase 
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager;

<MessageComponent @ref="msgComponent"></MessageComponent>

<h3>Размещение заказа</h3>
<br />

@if (order != null)
{
<div class="row">
    <div class="col">
        <CustomerFormComponent OnCustomerInfoSubmitted="HandleCustomerInfoSubmitted"></CustomerFormComponent>
    </div>
    <div class="col">
        <OrderSummaryComponent Order="order" HidePlaceOrderButton="true"></OrderSummaryComponent>
    </div>
</div>
}




@code {

    private Order order;

    private MessageComponent msgComponent;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await viewShoppingCartUseCase.Execute();
            StateHasChanged();
        }
    }

    private async void HandleCustomerInfoSubmitted(CustomerViewModel customer)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            order.UserId = currentUser.Id;
        }
        var mapper = new AutoMapper.MapperConfiguration(cfg => cfg.CreateMap<CustomerViewModel, Order>()).CreateMapper();
        mapper.Map<CustomerViewModel, Order>(customer, order);
        var orderUniqueId = await placeOrderUseCase.Execute(order);
        if (string.IsNullOrWhiteSpace(orderUniqueId))
        {
            msgComponent.ShowError("Неверная информация в заказе, проверьте пожалуйста данные.");
        }
        else
        {
            NavigationManager.NavigateTo($"/orderconfirm/{orderUniqueId}");
        }
    }

}
