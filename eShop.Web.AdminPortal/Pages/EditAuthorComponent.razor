@page "/editauthor/{authorId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager NavigationManager
@inject IGetAuthorByIdUseCase GetAuthorByIdUseCase
@inject IEditAuthorUseCase EditAuthorUseCase

<h3>Редактирование автора</h3>
<br />
@if (author != null)
{
    <EditForm Model="author" OnValidSubmit="OnValidSumit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Имя</label>
            <InputText id="name" @bind-Value="author.FirstName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="secondName">Фамилия</label>
            <InputText id="secondName" @bind-Value="author.SecondName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="lastName">Фамилия</label>
            <InputText id="lastName" @bind-Value="author.LastName" class="form-control"></InputText>
        </div>
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Отменить</button>
    </EditForm>

}


@code {
    [Parameter]
    public string AuthorId { get; set; }

    private Author author;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.AuthorId, out int iAuthorId))
        {
            var auth = GetAuthorByIdUseCase.Execute(iAuthorId);
            this.author = new Author(auth);
        }
    }

    private void OnValidSumit()
    {
        EditAuthorUseCase.Execute(this.author);
        NavigationManager.NavigateTo("/authors");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/authors");
    }

}
