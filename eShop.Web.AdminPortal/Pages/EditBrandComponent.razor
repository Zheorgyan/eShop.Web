@page "/editbrand/{brandId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager NavigationManager
@inject IGetBrandByIdUseCase GetBrandByIdUseCase
@inject IEditBrandUseCase EditBrandUseCase

<h3>Редактирование издательства</h3>
<br />
@if (brand != null)
{
    <EditForm Model="brand" OnValidSubmit="OnValidSumit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Наименование</label>
            <InputText id="name" @bind-Value="brand.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="description">Описание</label>
            <InputText id="description" @bind-Value="brand.Description" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Отменить</button>
    </EditForm>

}


@code {
    [Parameter]
    public string BrandId { get; set; }

    private Brand brand;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.BrandId, out int iBrandId))
        {
            var brand = GetBrandByIdUseCase.Execute(iBrandId);
            this.brand = new Brand { BrandId = brand.BrandId, Name = brand.Name, Description = brand.Description };
        }
    }

    private void OnValidSumit()
    {
        EditBrandUseCase.Execute(this.brand);
        NavigationManager.NavigateTo("/brands");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/brands");
    }

}
